// Code generated by MockGen. DO NOT EDIT.
// Source: v1_login.go

// Package mocks_v1_login is a generated GoMock package.
package mocks_v1_login

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	user "example.com/back/auth/internal/user"
)

// MockuserGetter is a mock of userGetter interface
type MockuserGetter struct {
	ctrl     *gomock.Controller
	recorder *MockuserGetterMockRecorder
}

// MockuserGetterMockRecorder is the mock recorder for MockuserGetter
type MockuserGetterMockRecorder struct {
	mock *MockuserGetter
}

// NewMockuserGetter creates a new mock instance
func NewMockuserGetter(ctrl *gomock.Controller) *MockuserGetter {
	mock := &MockuserGetter{ctrl: ctrl}
	mock.recorder = &MockuserGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockuserGetter) EXPECT() *MockuserGetterMockRecorder {
	return m.recorder
}

// GetUserByEmailPassword mocks base method
func (m *MockuserGetter) GetUserByEmailPassword(ctx context.Context, login, password string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailPassword", ctx, login, password)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailPassword indicates an expected call of GetUserByEmailPassword
func (mr *MockuserGetterMockRecorder) GetUserByEmailPassword(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailPassword", reflect.TypeOf((*MockuserGetter)(nil).GetUserByEmailPassword), ctx, login, password)
}

// MocktokenGetter is a mock of tokenGetter interface
type MocktokenGetter struct {
	ctrl     *gomock.Controller
	recorder *MocktokenGetterMockRecorder
}

// MocktokenGetterMockRecorder is the mock recorder for MocktokenGetter
type MocktokenGetterMockRecorder struct {
	mock *MocktokenGetter
}

// NewMocktokenGetter creates a new mock instance
func NewMocktokenGetter(ctrl *gomock.Controller) *MocktokenGetter {
	mock := &MocktokenGetter{ctrl: ctrl}
	mock.recorder = &MocktokenGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocktokenGetter) EXPECT() *MocktokenGetterMockRecorder {
	return m.recorder
}

// GetAccessToken mocks base method
func (m *MocktokenGetter) GetAccessToken(u *user.User) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", u)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAccessToken indicates an expected call of GetAccessToken
func (mr *MocktokenGetterMockRecorder) GetAccessToken(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MocktokenGetter)(nil).GetAccessToken), u)
}

// GetRefreshToken mocks base method
func (m *MocktokenGetter) GetRefreshToken(u *user.User) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", u)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRefreshToken indicates an expected call of GetRefreshToken
func (mr *MocktokenGetterMockRecorder) GetRefreshToken(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MocktokenGetter)(nil).GetRefreshToken), u)
}
