// Code generated by MockGen. DO NOT EDIT.
// Source: v1_users_post.go

// Package mocks_v1_users_post is a generated GoMock package.
package mocks_v1_users_post

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	user "example.com/back/auth/internal/user"
)

// MockuserManager is a mock of userManager interface
type MockuserManager struct {
	ctrl     *gomock.Controller
	recorder *MockuserManagerMockRecorder
}

// MockuserManagerMockRecorder is the mock recorder for MockuserManager
type MockuserManagerMockRecorder struct {
	mock *MockuserManager
}

// NewMockuserManager creates a new mock instance
func NewMockuserManager(ctrl *gomock.Controller) *MockuserManager {
	mock := &MockuserManager{ctrl: ctrl}
	mock.recorder = &MockuserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockuserManager) EXPECT() *MockuserManagerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockuserManager) Create(ctx context.Context, name, email, password, phone string, role user.Role) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, email, password, phone, role)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockuserManagerMockRecorder) Create(ctx, name, email, password, phone, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockuserManager)(nil).Create), ctx, name, email, password, phone, role)
}

// GetUserByID mocks base method
func (m *MockuserManager) GetUserByID(ctx context.Context, id int) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockuserManagerMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockuserManager)(nil).GetUserByID), ctx, id)
}

// GetUserByPhone mocks base method
func (m *MockuserManager) GetUserByPhone(ctx context.Context, phone string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhone", ctx, phone)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhone indicates an expected call of GetUserByPhone
func (mr *MockuserManagerMockRecorder) GetUserByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhone", reflect.TypeOf((*MockuserManager)(nil).GetUserByPhone), ctx, phone)
}

// MocksessionsVerificationChecker is a mock of sessionsVerificationChecker interface
type MocksessionsVerificationChecker struct {
	ctrl     *gomock.Controller
	recorder *MocksessionsVerificationCheckerMockRecorder
}

// MocksessionsVerificationCheckerMockRecorder is the mock recorder for MocksessionsVerificationChecker
type MocksessionsVerificationCheckerMockRecorder struct {
	mock *MocksessionsVerificationChecker
}

// NewMocksessionsVerificationChecker creates a new mock instance
func NewMocksessionsVerificationChecker(ctrl *gomock.Controller) *MocksessionsVerificationChecker {
	mock := &MocksessionsVerificationChecker{ctrl: ctrl}
	mock.recorder = &MocksessionsVerificationCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksessionsVerificationChecker) EXPECT() *MocksessionsVerificationCheckerMockRecorder {
	return m.recorder
}

// IsSessionValid mocks base method
func (m *MocksessionsVerificationChecker) IsSessionValid(ctx context.Context, sessionID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSessionValid", ctx, sessionID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSessionValid indicates an expected call of IsSessionValid
func (mr *MocksessionsVerificationCheckerMockRecorder) IsSessionValid(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSessionValid", reflect.TypeOf((*MocksessionsVerificationChecker)(nil).IsSessionValid), ctx, sessionID)
}

// MocksessionsDeleter is a mock of sessionsDeleter interface
type MocksessionsDeleter struct {
	ctrl     *gomock.Controller
	recorder *MocksessionsDeleterMockRecorder
}

// MocksessionsDeleterMockRecorder is the mock recorder for MocksessionsDeleter
type MocksessionsDeleterMockRecorder struct {
	mock *MocksessionsDeleter
}

// NewMocksessionsDeleter creates a new mock instance
func NewMocksessionsDeleter(ctrl *gomock.Controller) *MocksessionsDeleter {
	mock := &MocksessionsDeleter{ctrl: ctrl}
	mock.recorder = &MocksessionsDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksessionsDeleter) EXPECT() *MocksessionsDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MocksessionsDeleter) Delete(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MocksessionsDeleterMockRecorder) Delete(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MocksessionsDeleter)(nil).Delete), ctx, sessionID)
}

// MockrequestValidator is a mock of requestValidator interface
type MockrequestValidator struct {
	ctrl     *gomock.Controller
	recorder *MockrequestValidatorMockRecorder
}

// MockrequestValidatorMockRecorder is the mock recorder for MockrequestValidator
type MockrequestValidatorMockRecorder struct {
	mock *MockrequestValidator
}

// NewMockrequestValidator creates a new mock instance
func NewMockrequestValidator(ctrl *gomock.Controller) *MockrequestValidator {
	mock := &MockrequestValidator{ctrl: ctrl}
	mock.recorder = &MockrequestValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockrequestValidator) EXPECT() *MockrequestValidatorMockRecorder {
	return m.recorder
}

// Struct mocks base method
func (m *MockrequestValidator) Struct(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Struct", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Struct indicates an expected call of Struct
func (mr *MockrequestValidatorMockRecorder) Struct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Struct", reflect.TypeOf((*MockrequestValidator)(nil).Struct), arg0)
}
